메소드
	이름뒤에 소괄호()
	반복되는 기능 관리

	f	(x) 	=	 2x + 1
	메소드	매개		리턴값
	이름	변수

	메소드 사용시
	1. 메소드 선언구역 내부에 있는 모든 문장들을 실행한다.
	2. return값이 있다면 사용한 부분을 그 값으로 통채로 변환

메소드 선언

	def ①메소드명(②매개변수1, 매개변수2, ...):
		③실행할 문장
		④return 리턴값

	① 동사형으로 작성한다. "바나나"(매개변수)를 "먹는다"(메소드)
	② 생략 가능하다. 
	    없다면 외부에서(사용하는 곳에서) 값을 전달 받을수 없다.
	③ 생략 가능하다.
	④ (리턴할 값이 없다면) 생략 가능하다. 리턴값이 있다면 사용하는 곳
	    통채로를 리턴값으로 보자. 없으면 값으로 봐서는 안된다.

메소드 사용
	매개변수의 갯수와 순서에 맞게 값을 전달한다.
	
	메소드명(값1, 값2, ...)	--> 매개변수 선언되어 있을 때
	메소드명()		--> 매개변수 선언되어 있지 않을 때

메소드 주의사항
	메소드는 절대 메소드 안에 선언하지 않는다.
	매개변수가 없다면 외부에서(사용하는 곳에서) 값을 받아올 수 없다.
	리턴값이 있다면 사용하는 부분 통채로를 리턴값으로 본다.
	
메소드 사용 목적
	1. 반복되는 기능들을 쉽게 관리하기 위해서
	   (재사용의 목적이 있기 때문에 특정성을 부여해서는 안된다)
	2. 소스코드 간결화

메소드 선언 순서

	문제) 두 정수의 덧셈 메소드

	1. 메소드 명을 생각한다.
		def add():
	2. 매개변수를 생각한다.	
		def add(num1, num2):
	3. 내부에서 실행할 문장을 생각한다.
		def add(num1, num2):
			result = num1+num2
	4. 리턴값을 생각한다.
		def add(num1, num2):
			result = num1+num2
			return result
		
리턴을 사용할 때
	메소드 내에서 모든 작업이 완료되지 못할 때
	사용하는 부분에서 할 작업이 더 남았을 때
	사용하는 부분에 메소드 내의 로직 결과를 알려줘야 할 때

리턴을 사용하지 않을 때 (실행 메소드)
	메소드 내에서 모든 작업이 완료되어 결과를 눈으로 보았을 때
	작업이 완료되어 더이상 할 것이 남아있지 않을 때

컬렉션(Collection)
	여러 값들이 함께 모여있는 형태
	리스트, 튜플, 딕셔너리, 셋, ...
======================================================
튜플(tuple) : immutable(변할 수 없는)
	리스트와 동일하나 값을 변경, 삭제할 수가 없다.

	튜플명 = (1,2,3,4)
	튜플명 = 1,2,3,4
	튜플명 = tuple()

튜플 사용
	arTuple=(1,2,3,4,5)
	print(arTuple[0]) : 1  -->인덱싱

튜플에 값 추가
	튜플명+=(합칠 튜플)
=================================================
딕셔너리(dictionary)
	키:값 쌍으로 이루어져서 저장되어 있는 형태

	딕셔너리명 = {키1:값1, 키2:값2, 키3:값3, ...}
	딕셔너리명=dict()

딕셔너리 주의사항
	1.키값은 중복이 불가능하다.
	2.딕셔너리는 인덱스가 존재하지 않고, 키로 값을 가져온다.

딕셔너리 사용
	딕셔너리명[키값] --> 해당값

딕셔너리에 값 추가
	딕셔너리[없는키] = 새로운값

딕셔너리 값 수정
	딕셔너리명[존재하는키] = 새로운값
	
딕셔너리 값 삭제
	딕셔너리는 키와 값이 쌍으로 이루어져 있기 때문에 둘 다 삭제된다.
	del 딕셔너리명[키]
딕셔너리명.keys()
	키값들만 모아서 새로운 컬렉션으로 생성
	dict_keys()는 인덱스가 존재하지 않으므로 list로 형변환 후 
	사용한다.
딕셔너리명.values()
	값들만 모아서 새로운 컬렉션으로 생성
	dict_values()도 인덱스가 존재하지 않으므로 list로 형변환 후 
	사용한다.
딕셔너리명.items()
	(키, 값) 들이 담겨있는 컬렉션으로 생성
	키와 쌍을 이루는 값이 둘다 동시에 필요할 때 사용
	위와 동일

딕셔너리의 길이
	len(딕셔너리명) : 한 쌍을 1로 카운트 한다.

=====================================================

빠른 for문(foreach문, 향상된 for문)

	for 변수 in 컬렉션:
		변수사용

	i라는 인덱스를 의미하는 변수가 없기 때문에
	순서가 중요한 반복인 경우에는 사용하기 어렵다.

=======================================================
셋(set)
	파이썬 2.3버전부터 지원, 집합
	1. 원소의 중복이 없다.
	2. 원소의 순서가 없다.

	셋명 = {값1, 값2, 값3, ...}
	셋명 = set()

셋에 값 추가하기
	셋명.add(값)
	셋명.update([값1, 값2, ...])

셋 값 삭제하기
	셋명.remove(값)


교집합
	s1&s2
	s1.intersection(s2)

합집합
	s1|s2
	s1.union(s2)
차집합
	s1-s2
	s1.difference(s2)
	